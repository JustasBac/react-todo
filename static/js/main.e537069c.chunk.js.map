{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","objToday","Date","domEnder","a","test","parseInt","charAt","dayOfMonth","getDate","curMonth","Array","getMonth","curYear","getFullYear","today","getHours","getMinutes","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","date","type","placeholder","name","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","TodoList","setTodos","console","log","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iNAoEeA,MAlEf,SAAkBC,GACd,IAAIC,EAAW,IAAIC,KACfC,EAAW,WACP,IAAIC,EAAIH,EACR,MAAI,IAAII,KAAKC,UAAUF,EAAI,IAAIG,OAAO,KAAa,KAE5C,KADPH,EAAIE,UAAUF,EAAI,IAAIG,OAAO,KACZ,KAAO,IAAMH,EAAI,KAAO,IAAMA,EAAI,KAAO,KAJnD,GAMXI,EAAcP,EAASQ,UAAY,GAAM,IAAMR,EAASQ,UAAYN,EAAWF,EAASQ,UAAYN,EAEpGO,EADS,IAAIC,MAAM,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAC/GV,EAASW,YAC3BC,EAAUZ,EAASa,cAInBC,EAHUd,EAASe,WAGD,KAFNf,EAASgB,aAAe,GAAK,IAAMhB,EAASgB,aAAehB,EAASgB,cAE5C,IAAMP,EAAW,IAAMF,EAAa,KAAOK,EAEnF,EAA0BK,mBAASlB,EAAMmB,KAAOnB,EAAMmB,KAAKC,MAAQ,KAAnE,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAWC,iBAAO,MAExBC,qBAAU,WACNF,EAASG,QAAQC,WAGrB,IAAMC,EAAe,SAAAC,GACjBP,EAASO,EAAEC,OAAOV,QActB,OACI,sBAAMW,UAAU,YAAYC,SAZX,SAAAH,GACjBA,EAAEI,iBAEFjC,EAAMgC,SAAS,CACXE,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMjB,EACNkB,KAAMxB,IAEVO,EAAS,KAIT,SACKtB,EAAMmB,KAAQ,yCAAG,uBACdqB,KAAK,OACLC,YAAY,gBACZrB,MAAOC,EACPqB,KAAK,OACLX,UAAU,kBACVY,SAAUf,EACVgB,IAAKrB,IAEL,wBAAQQ,UAAU,mBAAlB,oBATW,OAUV,yCAAG,uBACAS,KAAK,OACLC,YAAY,aACZrB,MAAOC,EACPqB,KAAK,OACLX,UAAU,aACVY,SAAUf,EACVgB,IAAKrB,IACL,wBAAQQ,UAAU,cAAlB,8BCpBLc,MArCf,YAAgE,IAAhDC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,WAC7C,EAAwB/B,mBAAS,CAC7BgB,GAAI,KACJd,MAAO,KAFX,mBAAOD,EAAP,KAAa+B,EAAb,KAaA,OAAI/B,EAAKe,GACE,cAAC,EAAD,CAAUf,KAAMA,EAAMa,SATZ,SAAAZ,GACjB6B,EAAW9B,EAAKe,GAAId,GACpB8B,EAAQ,CACJhB,GAAI,KACJd,MAAO,QAOR0B,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACb,sBAAKtB,UAAWqB,EAAKE,WAAa,oBAAsB,WAAxD,UAEI,sBAAKvB,UAAU,YAAYwB,QAAS,kBAAMR,EAAaK,EAAKlB,KAA5D,UACI,8BACKkB,EAAKd,MADAc,EAAKlB,IAGf,sBAAKH,UAAU,YAAf,sBACcqB,EAAKb,WAIvB,sBAAKR,UAAU,QAAf,UACI,cAAC,IAAD,CAAcwB,QAAS,kBAAMP,EAAWI,EAAKlB,KAAKH,UAAU,gBAC5D,cAAC,IAAD,CAAWwB,QAAS,kBAAML,EAAQ,CAAEhB,GAAIkB,EAAKlB,GAAId,MAAOgC,EAAKd,QAASP,UAAU,mBAbfsB,OC0BlEG,MA7Cf,WACI,MAA0BtC,mBAAS,IAAnC,mBAAO4B,EAAP,KAAcW,EAAd,KAmCA,OACI,sBAAK1B,UAAU,YAAf,UACI,gEACA,cAAC,EAAD,CAAUC,SApCF,SAAAoB,GACZ,GAAKA,EAAKd,OAAQ,QAAQjC,KAAK+C,EAAKd,MAApC,CAGAoB,QAAQC,IAAI,WAAYP,GACxB,IAAMQ,EAAQ,sBAAOd,GAAP,CAAcM,IAC5BM,QAAQC,IAAI,eAAgBC,GAC5BH,EAASG,OA8BL,cAAC,EAAD,CAAMd,MAAOA,EAAOC,aAfP,SAAAb,GACjB,IAAI2B,EAAef,EAAMK,KAAI,SAAAC,GAKzB,OAJIA,EAAKlB,KAAOA,IACZkB,EAAKE,YAAcF,EAAKE,YAGrBF,KAEXK,EAASI,IAO2Cb,WApBrC,SAAAd,GACf,IAAM4B,EAAY,YAAIhB,GAAOiB,QAAO,SAAAX,GAAI,OAAIA,EAAKlB,KAAOA,KACxDuB,EAASK,IAkBmEb,WA3B7D,SAACe,EAAQC,GACnBA,EAAS3B,OAAQ,QAAQjC,KAAK4D,EAAS3B,OAG5CmB,GAAS,SAAAS,GAAI,OAAIA,EAAKf,KAAI,SAAAgB,GAAI,OAAKA,EAAKjC,KAAO8B,EAASC,EAAWE,eCV5DC,MARf,WACE,OACE,qBAAKrC,UAAU,MAAf,SACE,cAAC,EAAD,OCFNsC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e537069c.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\n\r\nfunction TodoForm(props) {\r\n    var objToday = new Date(),\r\n        domEnder = function () {\r\n            var a = objToday;\r\n            if (/1/.test(parseInt((a + \"\").charAt(0)))) return \"th\";\r\n            a = parseInt((a + \"\").charAt(1));\r\n            return 1 === a ? \"st\" : 2 === a ? \"nd\" : 3 === a ? \"rd\" : \"th\"\r\n        }(),\r\n        dayOfMonth = (objToday.getDate() < 10) ? '0' + objToday.getDate() + domEnder : objToday.getDate() + domEnder,\r\n        months = new Array('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'),\r\n        curMonth = months[objToday.getMonth()],\r\n        curYear = objToday.getFullYear(),\r\n        curHour = objToday.getHours(),\r\n        curMinute = objToday.getMinutes() < 10 ? \"0\" + objToday.getMinutes() : objToday.getMinutes();\r\n\r\n    var today = curHour + \":\" + curMinute + \" \" + curMonth + \" \" + dayOfMonth + \", \" + curYear;\r\n\r\n    const [input, setInput] = useState(props.edit ? props.edit.value : ' ');\r\n\r\n    const inputRef = useRef(null)\r\n\r\n    useEffect(() => {\r\n        inputRef.current.focus() //focus ant ko paspausta. Siuo atveju input\r\n    })\r\n\r\n    const handleChange = e => {\r\n        setInput(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        props.onSubmit({\r\n            id: Math.floor(Math.random() * 10000), //sukuriam random id\r\n            text: input,\r\n            date: today\r\n        });\r\n        setInput(''); //kai paspaudi mygtuka tada inputo value padaro ' '\r\n    };\r\n\r\n    return (\r\n        <form className=\"todo-form\" onSubmit={handleSubmit}>\r\n            {props.edit ? (<> <input\r\n                type=\"text\"\r\n                placeholder=\"Update a task\"\r\n                value={input}\r\n                name=\"text\"\r\n                className=\"todo-input edit\"\r\n                onChange={handleChange}\r\n                ref={inputRef}\r\n            />\r\n                <button className=\"todo-button edit\">Update</button> </>) :\r\n                (<> <input\r\n                    type=\"text\"\r\n                    placeholder=\"Add a task\"\r\n                    value={input}\r\n                    name=\"text\"\r\n                    className=\"todo-input\"\r\n                    onChange={handleChange}\r\n                    ref={inputRef} />\r\n                    <button className=\"todo-button\">Add a task</button></>)}\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TodoForm\r\n","import React, { useState } from 'react'\r\nimport { AiFillDelete } from 'react-icons/ai'\r\nimport { FaRegEdit } from 'react-icons/fa'\r\nimport TodoForm from './TodoForm'\r\n\r\nfunction Todo({ todos, completeTodo, removeTodo, updateTodo }) {\r\n    const [edit, setEdit] = useState({\r\n        id: null,\r\n        value: ''\r\n    });\r\n\r\n    const submitUpdate = value => {\r\n        updateTodo(edit.id, value);\r\n        setEdit({\r\n            id: null,\r\n            value: ''\r\n        });\r\n    };\r\n\r\n    if (edit.id) {\r\n        return <TodoForm edit={edit} onSubmit={submitUpdate} />\r\n    }\r\n    return todos.map((todo, index) => (\r\n        <div className={todo.isComplete ? 'todo-row complete' : 'todo-row'} key={index} >\r\n\r\n            <div className=\"stulpelis\" onClick={() => completeTodo(todo.id)}>\r\n                <div key={todo.id} >\r\n                    {todo.text}\r\n                </div>\r\n                <div className=\"todo-data\">\r\n                    Added at {todo.date}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"icons\">\r\n                <AiFillDelete onClick={() => removeTodo(todo.id)} className=\"delete-icon\" />\r\n                <FaRegEdit onClick={() => setEdit({ id: todo.id, value: todo.text })} className=\"edit-icon\" />\r\n            </div>\r\n        </div >\r\n    ));\r\n}\r\n\r\nexport default Todo","import React, { useState } from 'react'\r\nimport Todo from './Todo';\r\nimport TodoForm from './TodoForm'\r\n\r\nfunction TodoList() {\r\n    const [todos, setTodos] = useState([])\r\n\r\n    const addTodo = todo => {\r\n        if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n            return;\r\n        }\r\n        console.log(\"todo...:\", todo)\r\n        const newTodos = [...todos, todo];\r\n        console.log(\"newTodos...:\", newTodos)\r\n        setTodos(newTodos);\r\n    };\r\n\r\n    const updateTodo = (todoId, newValue) => {\r\n        if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n            return;\r\n        }\r\n        setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\r\n    }\r\n\r\n    const removeTodo = id => {\r\n        const removeArr = [...todos].filter(todo => todo.id !== id);\r\n        setTodos(removeArr);\r\n    }\r\n\r\n    const completeTodo = id => {\r\n        let updatedTodos = todos.map(todo => {\r\n            if (todo.id === id) {\r\n                todo.isComplete = !todo.isComplete;\r\n\r\n            }\r\n            return todo;\r\n        });\r\n        setTodos(updatedTodos);\r\n    };\r\n\r\n    return (\r\n        <div className=\"pagrindas\">\r\n            <h1>What are your plans for today?</h1>\r\n            <TodoForm onSubmit={addTodo} />\r\n            <Todo todos={todos} completeTodo={completeTodo} removeTodo={removeTodo} updateTodo={updateTodo} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList\r\n","import './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}